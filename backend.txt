## Backend Setup
mkdir korkyin
cd korkyin
npm init -y

# Install dependencies
npm install express mongoose body-parser nodemailer bcryptjs jsonwebtoken cors

# Setup server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

mongoose.connect('mongodb://localhost:27017/korkyin', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

app.get('/', (req, res) => res.send('Korkyin API'));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

# Create models/User.js and models/Employer.js for riders and employers respectively
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const UserSchema = new Schema({
  name: String,
  age: Number,
  gender: String,
  email: { type: String, unique: true },
  education: String,
  interest: String,
  paymentType: String,
});

module.exports = mongoose.model('User', UserSchema);

const EmployerSchema = new Schema({
  companyName: String,
  location: String,
  contactInfo: String,
  interestType: String,
});

module.exports = mongoose.model('Employer', EmployerSchema);

# Create routes/users.js and routes/employers.js for handling user signups
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const Employer = require('../models/Employer');
const nodemailer = require('nodemailer');

// User signup route
router.post('/signup/user', async (req, res) => {
  const { name, age, gender, email, education, interest, paymentType } = req.body;
  try {
    const newUser = new User({ name, age, gender, email, education, interest, paymentType });
    await newUser.save();
    
    // Send confirmation email
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'your-email@gmail.com',
        pass: 'your-email-password'
      }
    });

    const mailOptions = {
      from: 'your-email@gmail.com',
      to: email,
      subject: 'Registration Confirmation',
      text: `Thank you for registering, ${name}.`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        return console.log(error);
      }
      console.log('Email sent: ' + info.response);
    });

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// Employer signup route
router.post('/signup/employer', async (req, res) => {
  const { companyName, location, contactInfo, interestType } = req.body;
  try {
    const newEmployer = new Employer({ companyName, location, contactInfo, interestType });
    await newEmployer.save();
    
    // Send confirmation email
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'your-email@gmail.com',
        pass: 'your-email-password'
      }
    });

    const mailOptions = {
      from: 'your-email@gmail.com',
      to: contactInfo,
      subject: 'Registration Confirmation',
      text: `Thank you for registering, ${companyName}.`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        return console.log(error);
      }
      console.log('Email sent: ' + info.response);
    });

    res.status(201).json({ message: 'Employer registered successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;

# Update server.js to use the routes
const userRoutes = require('./routes/users');
const employerRoutes = require('./routes/employers');

app.use('/api', userRoutes);
app.use('/api', employerRoutes);
